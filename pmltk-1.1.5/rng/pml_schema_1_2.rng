<?xml version="1.0"?>
<grammar xmlns="http://relaxng.org/ns/structure/1.0"
	xmlns:s="http://ufal.mff.cuni.cz/pdt/pml/schema/"
        xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
        xmlns:sch="http://www.ascc.net/xml/schematron"
	datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <sch:ns prefix="s" uri="http://ufal.mff.cuni.cz/pdt/pml/schema/"/>
  <a:documentation>PML schema syntax (revision 1.1.3)</a:documentation>

  <define name="template_name.type">
    <data type="NCName"/>
  </define>

  <include href="pml_schema_1_1.rng">
    <a:documentation>This sections contains direct modifications to
    the PML Schema 1.1 grammar</a:documentation>

    <define name="version">
      <value>1.2</value>
    </define>
    <define name="pml_schema.body">
      <zeroOrMore>
	<choice>
	  <ref name="root.element"/>
	  <ref name="template.body"/>
	</choice>
      </zeroOrMore>
    </define>
    <define name="import.element.attributes">
      <optional>
	<attribute name="root">
	  <a:documentation>whether to import a root declaration</a:documentation>
	  <ref name="pml_schema_bool.type"/>
	</attribute>
      </optional>
      <optional>
	<attribute name="template">
	  <a:documentation>templates to import: * means all</a:documentation>
	  <choice>
	      <ref name="template_name.type"/>
	      <value>*</value>
	  </choice>
	</attribute>
      </optional>
      <optional>
	<attribute name="type">
	  <a:documentation>types to import: * means all</a:documentation>
	  <choice>
	    <ref name="type_name.type"/>
	    <value>*</value>
	  </choice>
	</attribute>
      </optional>
    </define>

    <start>
      <ref name="pml_schema.element"/>
    </start>

  </include>

  <define name="template.element">
    <element name="s:template">
      <a:documentation>a template consisting of a group of types
      parametrs; see also copy</a:documentation>
      <attribute name="name">
	<ref name="template_name.type"/>
      </attribute>
      <zeroOrMore>
	<ref name="param.element"/>
      </zeroOrMore>
      <ref name="template.body"/>
    </element>
  </define>
  <define name="template.body">
    <zeroOrMore>
      <choice>
	<ref name="import.element"/>
	<ref name="derive.element"/>
	<ref name="type.element"/>    
	<ref name="template.element"/>
	<ref name="copy.element"/>
      </choice>
    </zeroOrMore>
  </define>

  <define name="param.element">
    <element name="s:param">
      <a:documentation>a parameter of a template (a type that has to
      be specified upon copy)</a:documentation>
      <attribute name="name">
	<ref name="type_name.type"/>
      </attribute>
    </element>
  </define>
  <define name="copy.element">
    <element name="s:copy">
      <a:documentation>an instruction to copy all types from a given
      template prepending the names of the copies with an optional
      prefix and mapping the template parameters to actual types</a:documentation>
      <attribute name="template">
	<ref name="template_name.type"/>
      </attribute>
      <attribute name="prefix">
	<choice>
	  <data type="NCName"/>
	  <value></value>
	</choice>
      </attribute>
      <zeroOrMore>
	<ref name="let.element"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="let.element">
    <element name="s:let">
      <a:documentation>specification of a parameter: translates a
      template parameter to an actual type
      declaration</a:documentation>
      <attribute name="param">
	<ref name="type_name.type"/>
      </attribute>
      <ref name="type.decl"/>
    </element>
  </define>

</grammar>
